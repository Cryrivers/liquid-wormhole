<h1>The Basics</h1>

<p>
  Liquid Wormhole renders it's content near the application root, giving you the
  freedom to position it however you want without interfering with your
  application layout. However, the component retains its normal context within
  Ember, allowing it to communicate with surrounding components using attributes
  and actions.
</p>

<p>
  This allows you to embed your tethered objects anywhere in your code, meaning
  they can appear where they belong logically in your templates. You don't have
  to deal with any idiosyncratic services or APIs, and you don't have to worry
  about the peculiarities of positioning elements with CSS - It Just Works.
</p>

{{#scroll-spier id="parameters" on-pass="addPassedAnchor" on-unpass="removePassedAnchor"}}
  Parameters
{{/scroll-spier}}

<p>
  Every Liquid Wormhole <strong>requires</strong> a <code>to</code> attribute.
  This is the name of the target-outlet that the tether will be attached to. The
  target is automatically instantiated and cleaned up as tethers are attached
  and removed from it.
</p>

{{#scroll-spier id="targets" on-pass="addPassedAnchor" on-unpass="removePassedAnchor"}}
  What Are Targets?
{{/scroll-spier}}

<p>
  Targets are the elements that <code>liquid-wormhole</code>s are attached to
  when they are rendered. Liquid Wormhole manages the targets lifecycles, so if
  you specify a target name it will be created, managed, and destroyed
  automatically.
</p>

<p>
  Each target acts as a stack, rendering only the most recent
  <code>liquid-wormhole</code> that was sent to it. This is to provide context
  to wormholes, so animations can change accordingly and you can animate between
  different parts of a flow. Sometimes, a single target can be reused for many
  different types of components - for instance, a generic 'popover' or 'tooltip'
  target. In other cases when you need more complicated animations for a
  specific flow it makes sense to push them onto a new target.
</p>

{{#scroll-spier id="transitions" on-pass="addPassedAnchor" on-unpass="removePassedAnchor"}}
  Transitions
{{/scroll-spier}}

<p>
  Liquid Wormhole introduces the <code>target</code> constraint for matching
  targets by name and applying animations to them:
</p>

<div class="tab-content">
  {{code-snippet name="target-signature.js"}}
</div>

<p>
  It also adds the <code>onOpenWormhole</code> and <code>onCloseWormhole</code>
  constraints. These are quick constraints that you can add to give context to
  <code>use</code> and <code>reverse</code>. For instance, applying the
  <code>onOpenWormhole</code> constraint will apply the <code>use</code> animation
  to the tether as enters the dom, and the <code>reverse</code> animation to the
  tether as it leaves the dom.
</p>

<div class="tab-content">
  {{code-snippet name="open-wormhole-example.js"}}
</div>

<p>
  There are times when you may want to have knowledge of the context of
  your wormholes. For instance, if you have a multi-step modal dialogue you may
  want to use different animations for the beginning of the dialogue, going to
  the next step, going to the previous step, and ending the dialogue. You can
  use the standard <code>toValue</code> and <code>fromValue</code> in these
  cases. The value passed into these elements is the <code>liquid-wormhole</code>
  component itself, so any values set on the wormhole will be comparable.
</p>

<div class="tab-content">
  {{code-snippet name="value-matching-example.hbs"}}
  {{code-snippet name="value-matching-example.js"}}
</div>

{{#scroll-spier id="dom-structure-and-styles" on-pass="addPassedAnchor" on-unpass="removePassedAnchor"}}
  DOM Structure and Styles
{{/scroll-spier}}

<p>
  Liquid Wormhole creates the following DOM structure:
</p>

<div class="tab-content">
  {{code-snippet name="wormhole-dom-structure.hbs"}}
</div>

<p>
  You can apply a class directly to the liquid-target that
  contains your tethered element using the <code>targetClass</code> property.
</p>

{{#scroll-spier id="ember-compatibility" on-pass="addPassedAnchor" on-unpass="removePassedAnchor"}}
  Ember Compatibility
{{/scroll-spier}}

<p>
  Liquid Wormhole is tested on all versions of Ember >= 1.13. Long term support will
  continue for 1.13 and up for as long Ember core support continues.
</p>
